// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package redisRepository is a generated GoMock package.
package redisRepository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
	models "hive/models"
	reflect "reflect"
	time "time"
)

// MockIRedisRepository is a mock of IRedisRepository interface
type MockIRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisRepositoryMockRecorder
}

// MockIRedisRepositoryMockRecorder is the mock recorder for MockIRedisRepository
type MockIRedisRepositoryMockRecorder struct {
	mock *MockIRedisRepository
}

// NewMockIRedisRepository creates a new mock instance
func NewMockIRedisRepository(ctrl *gomock.Controller) *MockIRedisRepository {
	mock := &MockIRedisRepository{ctrl: ctrl}
	mock.recorder = &MockIRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRedisRepository) EXPECT() *MockIRedisRepositoryMockRecorder {
	return m.recorder
}

// GetSecret mocks base method
func (m *MockIRedisRepository) GetSecret(ctx context.Context, id go_uuid.UUID) *models.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, id)
	ret0, _ := ret[0].(*models.Secret)
	return ret0
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockIRedisRepositoryMockRecorder) GetSecret(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockIRedisRepository)(nil).GetSecret), ctx, id)
}

// CacheSecret mocks base method
func (m *MockIRedisRepository) CacheSecret(ctx context.Context, secret *models.Secret, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheSecret", ctx, secret, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheSecret indicates an expected call of CacheSecret
func (mr *MockIRedisRepositoryMockRecorder) CacheSecret(ctx, secret, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheSecret", reflect.TypeOf((*MockIRedisRepository)(nil).CacheSecret), ctx, secret, timeout)
}

// GetActualSecret mocks base method
func (m *MockIRedisRepository) GetActualSecret(ctx context.Context) *models.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualSecret", ctx)
	ret0, _ := ret[0].(*models.Secret)
	return ret0
}

// GetActualSecret indicates an expected call of GetActualSecret
func (mr *MockIRedisRepositoryMockRecorder) GetActualSecret(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualSecret", reflect.TypeOf((*MockIRedisRepository)(nil).GetActualSecret), ctx)
}

// CacheActualSecret mocks base method
func (m *MockIRedisRepository) CacheActualSecret(ctx context.Context, secret *models.Secret, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheActualSecret", ctx, secret, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheActualSecret indicates an expected call of CacheActualSecret
func (mr *MockIRedisRepositoryMockRecorder) CacheActualSecret(ctx, secret, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheActualSecret", reflect.TypeOf((*MockIRedisRepository)(nil).CacheActualSecret), ctx, secret, timeout)
}
