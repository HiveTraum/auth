// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package eventDispatchers is a generated GoMock package.
package eventDispatchers

import (
	gomock "github.com/golang/mock/gomock"
	proto "google.golang.org/protobuf/proto"
	reflect "reflect"
)

// MockIEventDispatcher is a mock of IEventDispatcher interface
type MockIEventDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIEventDispatcherMockRecorder
}

// MockIEventDispatcherMockRecorder is the mock recorder for MockIEventDispatcher
type MockIEventDispatcherMockRecorder struct {
	mock *MockIEventDispatcher
}

// NewMockIEventDispatcher creates a new mock instance
func NewMockIEventDispatcher(ctrl *gomock.Controller) *MockIEventDispatcher {
	mock := &MockIEventDispatcher{ctrl: ctrl}
	mock.recorder = &MockIEventDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIEventDispatcher) EXPECT() *MockIEventDispatcherMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockIEventDispatcher) Send(object string, version int32, payload proto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", object, version, payload)
}

// Send indicates an expected call of Send
func (mr *MockIEventDispatcherMockRecorder) Send(object, version, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockIEventDispatcher)(nil).Send), object, version, payload)
}
