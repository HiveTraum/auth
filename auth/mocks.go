// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package auth is a generated GoMock package.
package auth

import (
	models "auth/models"
	context "context"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockIAuthenticationController is a mock of IAuthenticationController interface
type MockIAuthenticationController struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthenticationControllerMockRecorder
}

// MockIAuthenticationControllerMockRecorder is the mock recorder for MockIAuthenticationController
type MockIAuthenticationControllerMockRecorder struct {
	mock *MockIAuthenticationController
}

// NewMockIAuthenticationController creates a new mock instance
func NewMockIAuthenticationController(ctrl *gomock.Controller) *MockIAuthenticationController {
	mock := &MockIAuthenticationController{ctrl: ctrl}
	mock.recorder = &MockIAuthenticationControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAuthenticationController) EXPECT() *MockIAuthenticationControllerMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockIAuthenticationController) Login(ctx context.Context, r *http.Request) (int, models.IAuthenticationBackendUser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, r)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(models.IAuthenticationBackendUser)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockIAuthenticationControllerMockRecorder) Login(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthenticationController)(nil).Login), ctx, r)
}
